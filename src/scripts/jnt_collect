#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Collect entry_point for Janitoo
"""
__license__ = """
    This file is part of Janitoo.

    Janitoo is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Janitoo is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Janitoo. If not, see <http://www.gnu.org/licenses/>.

"""
__author__ = 'Sébastien GALLET aka bibi21000'
__email__ = 'bibi21000@gmail.com'
__copyright__ = "Copyright © 2013-2014-2015 Sébastien GALLET aka bibi21000"

from pkg_resources import iter_entry_points
import argparse

def collect(key, output='txt'):
    if output == 'txt':
        print "-------------------------------------------------------------------------------"
        print "Group : %s" %key
    collected = []
    for entrypoint in iter_entry_points(group = key):
        collected.append("%s" %(entrypoint))
    collected.sort()
    for coll in collected:
        if output=='txt':
            print " %s" %(coll)
        elif output=='short':
            print "%s" %(coll.split(' = ')[0])
        else:
            print "%s" %(coll.replace(' = ','='))
    if output=='txt':
        print ""

CORE = ["janitoo.threads", "janitoo.components", "janitoo.values", "janitoo.models"]

FLASK = ["janitoo_flask.blueprint", "janitoo_flask.menu_left", "janitoo_flask.listener", "janitoo_flask.network"]

MANAGER = ["janitoo_manager.blueprint", "janitoo_manager.menu_left", "janitoo_manager.listener", "janitoo_manager.network"]

def jnt_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-o', '--output', action='store', help='The format (txt, raw, ...)', choices=['txt', 'raw'], default='txt')
    parser.add_argument('-t', '--type', action='store', help='The type of entry-point', choices=['all']+CORE+FLASK+MANAGER, default='all')

    #~ subparsers = parser.add_subparsers(dest='command', help='commands')

    return parser

def main():
    parser = jnt_parser()
    args = parser.parse_args()
    if args.type == "all":
        for mod in CORE+FLASK+MANAGER:
            collect(mod, output=args.output)
    else:
        collect(args.type, output=args.output)
if __name__ == '__main__':
    main()

